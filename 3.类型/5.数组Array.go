Golang Array和以往认知的数组有很大不同。

• 数组是值类型，赋值和传参会复制整个数组，而不是指针。
• 数组长度必须是常量，且是类型的组成部分。[2]int 和 [3]int 是不同类型。 
• 支持 "=="、"!=" 操作符，因为内存总是被初始化过的。
• 指针数组 [n]*T，数组指针 *[n]T。


可用复合语句初始化。

a := [3]int{1, 2} 		// 未初始化元素值为 0。
b := [...]int{1, 2, 3, 4}	// 通过初始化值确定数组长度。
c := [5]int{2: 100, 4:200} 	// 使用引号初始化元素。

d := [...]struct {
    name string
	age uint8 
}{
    {"user1", 10}, 		// 可省略元素类型。
    {"user2", 20},		// 别忘了最后一行的逗号。
}


持多维数组。

a := [2][3]int{{1, 2, 3}, {4, 5, 6}}
b := [...][2]int{{1, 1}, {2, 2}, {3, 3}} 	// 第 2 纬度不能用 "..."。


值拷行行为会造成性能问题，通常会建议使用 slice，或数组指针。
 
func test(x [2]int) {
    fmt.Printf("x: %p\n", &x)
    x[1] = 1000
}

func main() {
    a := [2]int{}
    fmt.Printf("a: %p\n", &a)
	 
	test(a)
    fmt.Println(a)
}

输出:
a: 0x2101f9150
x: 0x2101f9170
[0 0]


内置函数 len 和 cap 都返回数组长度 (元素数量)。

a := [2]int{}
println(len(a), cap(a))   // 2, 2